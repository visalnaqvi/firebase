s2 sharp

get group id from database status table and don't check if group is hot or heating every image needs to compressed so start compressing no matter what is group status, 
either make this step as a seperate stand alone code step which checks db continuesly for "hot" images to compress and update them
or add logic in api to fetch from firebase till image_byte are available
fetch images in batches 
keep stripped image in bucket , and image_byte 1400px width image, save 200px thumb byte
use same name for an image to save in firebase let's say {image_id}_filename this ensures if database update failed then next time the images are overritten in firebase and not recreated
update final group status and status table.
make sure code stops if database update failed
check how to create image_id
add a seperate step which checks if all warm images have required fileds available
add a step where status is updated as hot_failed where compression faild for images


POC:
check meta data integration back to image


s4
get group id from database status table and don't check if group is hot or heating every image needs extraction so start extraction no matter what is group status, 
make sure code stops if qdrant upset or db update fails
mark group status as face_insertion_failure and scan qdrant to insert those entries into db
marking images 'warming' failed mark group status as image_marking_failed , run the script to scan qdrant points and update faces table , then mark image_ids which exists in faces as 'warming'